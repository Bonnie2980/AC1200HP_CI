name: Build AC1200HP_K2

on: 
  release:
    types: [published]
  push:
    tags:
    - 'v*'
  #  branches: 
  #    - master
#  schedule:
#    - cron: 0 8 * * 5
  watch:
    types: [started]
env:
  TIME_ZONE: Asia/Shanghai
  FIRMWARE_PATH: /opt/firmwares
  UPLOAD_COWTRANSFER: true
  UPLOAD_WETRANSFER: false
  SERVERCHAN_NOTIFICATION: true
jobs:
  build:
    runs-on: ubuntu-16.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt-get install git autoconf automake bash bison bzip2 diffutils file flex
        sudo apt-get install m4 g++ gawk groff-base libncurses-dev libtool libslang2 make patch perl
        sudo apt-get install pkg-config shtool subversion tar texinfo zlib1g zlib1g-dev git-core gettext
        sudo apt-get install libexpat1-dev libssl-dev cvs gperf unzip python libxml-parser-perl gcc-multilib
        sudo apt-get install gconf-editor libxml2-dev g++-4.7 g++-multilib gitk libncurses5 mtd-utils
        sudo apt-get install libncurses5-dev libstdc++6-4.7-dev libvorbis-dev g++-4.7-multilib git autopoint
        sudo apt-get install autogen sed build-essential intltool libglib2.0-dev xutils-dev
        sudo apt-get install lib32z1-dev lib32stdc++6
        sudo timedatectl set-timezone "$TIME_ZONE"
    - name: Clone source code
      run: |
        git clone https://github.com/KevinandJacky/RT-AC1200HP_3.0.0.4.380.8287-for-K2.git /opt/asus
    - name: Apply patches
      run: |
        cp -f Custom/patches/init.c /opt/asus/release/src/router/rc/init.c
        cp -f Custom/patches/target.mak /opt/asus/release/src-rt/target.mak
        cp -f Custom/patches/ralink_spi.c /opt/asus/release/src-ra-mt7620/linux/linux-2.6.36.x/drivers/mtd/ralink/ralink_spi.c
        cp -f Custom/patches/ralink_bbu_spi.c /opt/asus/release/src-ra-mt7620/linux/linux-2.6.36.x/drivers/mtd/ralink/ralink_bbu_spi.c
        cp -f Custom/patches/extendno.conf /opt/asus/release/src/router/extendno.conf
        cp -f Custom/patches/CN.dict /opt/asus/release/src/router/www/CN.dict
        cp -f Custom/patches/EN.dict /opt/asus/release/src/router/www/EN.dict
        cp -f Custom/patches/asustitle.png /opt/asus/release/src/router/www/images/New_ui/asustitle.png
    - name: Build firmware
      run: |
        cp -f Custom/build.sh /opt/asus/build.sh
        cd /opt/asus
        sudo chmod +x build.sh
        sudo ./build.sh
    - name: Organize firmware files
      id: organize
      run: |
        mkdir -p $FIRMWARE_PATH/
        cd /opt/asus/release/src-ra-mt7620/image
        for firmwarefile in $(ls RT-AC1200HP_3.0.0.4*.trx)
        do sudo mv -f $firmwarefile $FIRMWARE_PATH/RT_AC1200HP_K2.trx
        done
        cd $FIRMWARE_PATH
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
    - name : Upload packages
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success'
      with:
        name: AC1200HP-packages
        path: ${{ env.FIRMWARE }}
    - name: Upload firmware to cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true'
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "DOWNLOADURL=$(cat cowtransfer.log | grep https)" >> $GITHUB_ENV
    - name: Upload firmware to WeTransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true'
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
    - name: ServerChan Notification
      if: steps.organize.outputs.status == 'success' && env.SERVERCHAN_NOTIFICATION == 'true'
      run: |
        curl -s "http://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=Build_Completed" --data-urlencode "&desp=${DOWNLOADURL}"
